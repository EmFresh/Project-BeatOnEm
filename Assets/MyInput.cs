//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/MyInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInput"",
    ""maps"": [
        {
            ""name"": ""Keyboard Actions"",
            ""id"": ""b9d2d16b-dc34-4517-9f43-0853ab953d93"",
            ""actions"": [
                {
                    ""name"": ""Note 1"",
                    ""type"": ""Button"",
                    ""id"": ""8cf6e479-8101-470a-a572-498e14064e29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note 2"",
                    ""type"": ""Button"",
                    ""id"": ""dbae04f8-3d77-4765-aa05-2212ad3b9278"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note 3"",
                    ""type"": ""Button"",
                    ""id"": ""ad81e936-25e0-4096-80a0-dbec40bba3bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note 4"",
                    ""type"": ""Button"",
                    ""id"": ""27899085-e642-4a48-8944-fa0b97daecdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""854a2a82-68e9-41e9-bb19-27917ca159f2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8e79e28-b9ec-4420-9148-41b5eb6aa99e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d373e55-af4a-4d59-a817-8a486cc0feba"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""511fdb97-564d-4e2f-b702-91d50bd77357"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard Actions
        m_KeyboardActions = asset.FindActionMap("Keyboard Actions", throwIfNotFound: true);
        m_KeyboardActions_Note1 = m_KeyboardActions.FindAction("Note 1", throwIfNotFound: true);
        m_KeyboardActions_Note2 = m_KeyboardActions.FindAction("Note 2", throwIfNotFound: true);
        m_KeyboardActions_Note3 = m_KeyboardActions.FindAction("Note 3", throwIfNotFound: true);
        m_KeyboardActions_Note4 = m_KeyboardActions.FindAction("Note 4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard Actions
    private readonly InputActionMap m_KeyboardActions;
    private IKeyboardActionsActions m_KeyboardActionsActionsCallbackInterface;
    private readonly InputAction m_KeyboardActions_Note1;
    private readonly InputAction m_KeyboardActions_Note2;
    private readonly InputAction m_KeyboardActions_Note3;
    private readonly InputAction m_KeyboardActions_Note4;
    public struct KeyboardActionsActions
    {
        private @MyInput m_Wrapper;
        public KeyboardActionsActions(@MyInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Note1 => m_Wrapper.m_KeyboardActions_Note1;
        public InputAction @Note2 => m_Wrapper.m_KeyboardActions_Note2;
        public InputAction @Note3 => m_Wrapper.m_KeyboardActions_Note3;
        public InputAction @Note4 => m_Wrapper.m_KeyboardActions_Note4;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActionsActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActionsActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsActionsCallbackInterface != null)
            {
                @Note1.started -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote1;
                @Note1.performed -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote1;
                @Note1.canceled -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote1;
                @Note2.started -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote2;
                @Note2.performed -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote2;
                @Note2.canceled -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote2;
                @Note3.started -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote3;
                @Note3.performed -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote3;
                @Note3.canceled -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote3;
                @Note4.started -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote4;
                @Note4.performed -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote4;
                @Note4.canceled -= m_Wrapper.m_KeyboardActionsActionsCallbackInterface.OnNote4;
            }
            m_Wrapper.m_KeyboardActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Note1.started += instance.OnNote1;
                @Note1.performed += instance.OnNote1;
                @Note1.canceled += instance.OnNote1;
                @Note2.started += instance.OnNote2;
                @Note2.performed += instance.OnNote2;
                @Note2.canceled += instance.OnNote2;
                @Note3.started += instance.OnNote3;
                @Note3.performed += instance.OnNote3;
                @Note3.canceled += instance.OnNote3;
                @Note4.started += instance.OnNote4;
                @Note4.performed += instance.OnNote4;
                @Note4.canceled += instance.OnNote4;
            }
        }
    }
    public KeyboardActionsActions @KeyboardActions => new KeyboardActionsActions(this);
    public interface IKeyboardActionsActions
    {
        void OnNote1(InputAction.CallbackContext context);
        void OnNote2(InputAction.CallbackContext context);
        void OnNote3(InputAction.CallbackContext context);
        void OnNote4(InputAction.CallbackContext context);
    }
}
